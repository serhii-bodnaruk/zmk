/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DVORAK 0
#define QUERTY 1
#define ARROWS  2
#define NUMBERS 3
#define SYMBOLS 4

/ {
    combos {
        compatible = "zmk,combos";
        combo_left_option {
            timeout-ms = <90>;
            key-positions = <13 16>;
            bindings = <&kp LALT>;
        };
        combo_left_ctrl {
            timeout-ms = <90>;
            key-positions = <15 16>;
            bindings = <&kp LCTRL>;
        };
        combo_left_shift {
            timeout-ms = <90>;
            key-positions = <14 16>;
            bindings = <&kp LSHFT>;
        };
        combo_left_cmd {
            timeout-ms = <90>;
            key-positions = <14 15>;
            bindings = <&kp LCMD>;
        };
        combo_left_cmd_shift {
            timeout-ms = <90>;
            key-positions = <14 15 16>;
            bindings = <&kp LS(LCMD)>;
        };
        combo_left_cmd_option {
            timeout-ms = <90>;
            key-positions = <13 15 16>;
            bindings = <&kp LA(LCMD)>;
        };
        combo_right_option {
            timeout-ms = <90>;
            key-positions = <19 22>;
            bindings = <&kp RALT>;
        };
        combo_right_ctrl {
            timeout-ms = <90>;
            key-positions = <19 20>;
            bindings = <&kp RCTRL>;
        };
        combo_right_shift {
            timeout-ms = <90>;
            key-positions = <19 21>;
            bindings = <&kp RSHFT>;
        };
        combo_right_cmd {
            timeout-ms = <90>;
            key-positions = <20 21>;
            bindings = <&kp LCMD>;
        };
        combo_right_cmd_shift {
            timeout-ms = <90>;
            key-positions = <19 20 21>;
            bindings = <&kp RS(RCMD)>;
        };
        combo_right_cmd_option {
            timeout-ms = <90>;
            key-positions = <19 20 22>;
            bindings = <&kp LA(LCMD)>;
        };
    };
};

/ {
        behaviors {
            colsem: colon_semicolon {
                #binding-cells = <0>;
                bindings = <&kp COLON>, <&kp SEMICOLON>;
                compatible = "zmk,behavior-mod-morph";
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            dqtsqt: double_quote_single_quote {
                #binding-cells = <0>;
                bindings = <&kp DQT>, <&kp SQT>;
                compatible = "zmk,behavior-mod-morph";
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            pipe_bslh: pipe_backslash {
                #binding-cells = <0>;
                bindings = <&kp PIPE>, <&kp BSLH>;
                compatible = "zmk,behavior-mod-morph";
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            pisl: pipe_bslash {
                #binding-cells = <2>;
                bindings = <&kp>, <&pipe_bslh>;
                compatible = "zmk,behavior-hold-tap";
                flavor = "tap-preferred";
                quick-tap-ms = <0>;
                tapping-term-ms = <150>;
            };
            syclsm: symbols_colsem {
                #binding-cells = <2>;
                bindings = <&mo>, <&colsem>;
                compatible = "zmk,behavior-hold-tap";
                flavor = "tap-preferred";
                quick-tap-ms = <0>;
                tapping-term-ms = <200>;
            };
            rpi: require_prior_idle {
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>;
                compatible = "zmk,behavior-hold-tap";
                flavor = "tap-preferred";
                quick-tap-ms = <200>;
                require-prior-idle-ms = <125>;
                tapping-term-ms = <200>;
            };
        };

        macros {
          langtog: langtog {
              compatible = "zmk,behavior-macro-one-param";
              wait-ms = <0>;
              tap-ms = <0>;
              #binding-cells = <1>;
              bindings
                  = <&macro_param_1to1>
                  , <&macro_tap &to MACRO_PLACEHOLDER>
                  , <&macro_tap &kp LC(SPACE)>;
          };

          focus_app_kb: focus_app_kb {
              compatible = "zmk,behavior-macro-one-param";
              wait-ms = <0>;
              tap-ms = <0>;
              #binding-cells = <1>;
              bindings
                  = <&macro_press &kp LCMD>
                  , <&macro_tap &kp H >
                  , <&macro_release &kp LCMD>
                  , <&macro_press &kp LCMD>
                  , <&macro_param_1to1>
                  , <&macro_tap &kp MACRO_PLACEHOLDER>
                  , <&macro_release &kp LCMD>;
          };
        };

        keymap {
                compatible = "zmk,keymap";

                dvorak_layer {
// -----------------------------------------------------------------------------------------
// | LCMD/`~   |  '"  |  ,<  |  .>  |  P  |  Y  |   |  F  |  G   |  C  |  R  |  L  | RCMD//?   |
// | CTRL/ESC  |  A   |  O   |  E   |  U  |  I  |   |  D  |  H   |  T  |  N  |  S  | CTRL/-_   |
// | SHFT/=+   |sym/:;|  Q   |  J   |  K  |  X  |   |  B  |  M   |  W  |  V  |  Z  | RSHFT/|\  |
//                           | QWRT |SPACE| BSPC|   | ENT | TAB  |CAPS |
                        bindings = <
   &kp GRAVE  &dqtsqt            &lt NUMBERS COMMA &lt ARROWS DOT   &kp P      &kp Y       &kp F   &kp G    &kp C    &kp R    &kp L          &kp SLASH
   &kp ESC    &kp A              &kp O             &kp E            &kp U      &kp I       &kp D   &kp H    &kp T    &kp N    &kp S          &kp MINUS
   &kp EQUAL  &syclsm SYMBOLS 0  &kp Q             &kp J            &kp K      &kp X       &kp B   &kp M    &kp W    &kp V    &lt SYMBOLS Z  &pipe_bslh
                                     &langtog QUERTY  &kp SPACE  &kp BSPC      &kp RET &kp TAB  &caps_word
                        >;
                };

                query_layer {
// -----------------------------------------------------------------------------------------
// |  `~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | [{   |
// | ]}   |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | DVK | SPACE | BSPC |   | ENT | TAB  | CAPS |
                        bindings = <
   &kp GRAVE    &kp Q           &lt NUMBERS W  &lt ARROWS E  &kp R  &kp T       &kp Y  &kp U  &kp I     &kp O   &kp P            &kp LBKT
   &trans       &kp A           &kp S          &kp D         &kp F  &kp G       &kp H  &kp J  &kp K     &kp L   &kp SEMI         &kp SQT
   &kp RBKT      &lt SYMBOLS Z   &kp X          &kp C         &kp V  &kp B       &kp N  &kp M  &kp COMMA &kp DOT &lt SYMBOLS FSLH &kp RSHFT
                                            &langtog DVORAK &trans &trans       &trans &trans &trans
                        >;
                };
                arrow_layer {
                        bindings = <
   &trans  &trans &trans &trans &trans &trans    &focus_app_kb F12   &bt BT_SEL 4      &kp UP            &bt BT_SEL 3      &bt BT_NXT &bt BT_DISC 3
   &trans  &trans &trans &trans &trans &trans    &focus_app_kb F11   &kp LEFT          &kp DOWN          &kp RIGHT         &trans     &bt BT_CLR
   &trans  &trans &trans &trans &trans &trans    &focus_app_kb F10   &focus_app_kb F9  &focus_app_kb F8  &focus_app_kb F7  &trans     &trans
                         &trans &trans &trans    &ext_power EP_ON &ext_power EP_OFF &trans
                        >;
                };

                numbers_layer {
                        bindings = <
   &trans  &trans &trans &trans &trans &trans    &trans &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &trans &trans
   &trans  &trans &trans &trans &trans &trans    &trans &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_0 &trans
   &trans  &trans &trans &trans &trans &trans    &trans &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &trans &trans
                         &trans &trans &trans    &trans &trans &trans
                        >;
                };

                symbols_layer {
// -----------------------------------------------------------------------------------------
// |      |  $  |  &  |  %  |  @  |  [  |   |  ]  |  *   |  #   |  !  |  ^  |      |
// |      |     |     |     |     |  {  |   |  }  | CMD A| CMD C|CMD V|     |      |
// |      |     |  ~  |  $  |     |  (  |   |  )  |      |  ^   |  `  |     |      |
//                    | DVK | BSPC | SPACE |   | ENT | TAB  | CAPS |
                        bindings = <
   &trans  &kp DLLR &kp AMPS &kp PRCNT &kp AT &kp LBKT    &kp RBKT &kp STAR &kp HASH &kp EXCL &kp CARET &trans
   &trans  &trans   &trans   &trans    &trans &kp LPAR    &kp RPAR &kp LG(A)   &kp LG(C)   &kp LG(V)   &trans    &trans
   &trans  &trans   &kp TILDE &kp DLLR &trans &kp LBRC    &kp RBRC &trans   &kp CARET   &kp GRAVE   &trans    &trans
                                  &trans &trans &trans    &trans &trans &trans
                        >;
                };
        };
};
